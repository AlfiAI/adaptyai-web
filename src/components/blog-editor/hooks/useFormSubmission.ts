import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useFormContext } from 'react-hook-form';
import { useToast } from '@/hooks/use-toast';
import { BlogFormData } from '../types';
import { BlogPostData } from '@/lib/dataAccess/types';
import { getBlogRepository } from '@/lib/dataAccess';
import { useBlogEditorContext } from '../context/BlogEditorContext';
import { AUTOSAVE_KEY } from '../types';

export const useFormSubmission = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { setIsSubmitting } = useBlogEditorContext();
  const { getValues, handleSubmit } = useFormContext<BlogFormData>();

  const processBlogContent = (formData: BlogFormData): BlogPostData => {
    let processedBody = formData.body || '';
    
    // Add key takeaways section if present
    if (formData.key_takeaways && formData.key_takeaways.length > 0) {
      const takeawaysSection = `## Key Takeaways\n${formData.key_takeaways.map(item => `- ${item}`).join('\n')}\n\n`;
      processedBody = takeawaysSection + processedBody;
    }
    
    // Add FAQs section if present
    if (formData.faqs && formData.faqs.length > 0) {
      const faqsSection = `\n\n## Frequently Asked Questions\n\n${formData.faqs.map(faq => 
        `### ${faq.question}\n${faq.answer}`
      ).join('\n\n')}`;
      processedBody = processedBody + faqsSection;
    }
    
    return {
      id: '', // Will be generated by Supabase
      title: formData.title || 'Untitled',
      slug: formData.slug || 'untitled',
      excerpt: formData.excerpt || '',
      body: processedBody,
      author: formData.author || 'Admin',
      tags: formData.tags || [],
      cover_image_url: formData.cover_image_url || '',
      featured: formData.featured || false,
      published_at: formData.published_at || new Date(),
    };
  };

  const onSubmit = async (formData: BlogFormData) => {
    try {
      setIsSubmitting(true);
      
      // Process the blog post data
      const blogPostData = processBlogContent(formData);
      
      // Save to Supabase
      const blogRepo = getBlogRepository();
      const postId = await blogRepo.create(blogPostData);
      
      if (!postId) {
        throw new Error("Failed to create blog post");
      }
      
      // Clear autosaved data
      localStorage.removeItem(AUTOSAVE_KEY);
      
      toast({
        title: "Success!",
        description: "Your blog post has been published.",
      });
      
      // Redirect to the newly created blog post
      navigate(`/blog/${blogPostData.slug}`);
      
    } catch (error) {
      console.error('Error publishing blog post:', error);
      toast({
        title: "Error",
        description: "Failed to publish blog post. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    onSubmit,
    handleSubmit
  };
};
